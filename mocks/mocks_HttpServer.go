// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/remipassmoilesel/gitsearch/http (interfaces: HttpServer)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHttpServer is a mock of HttpServer interface
type MockHttpServer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServerMockRecorder
}

// MockHttpServerMockRecorder is the mock recorder for MockHttpServer
type MockHttpServerMockRecorder struct {
	mock *MockHttpServer
}

// NewMockHttpServer creates a new mock instance
func NewMockHttpServer(ctrl *gomock.Controller) *MockHttpServer {
	mock := &MockHttpServer{ctrl: ctrl}
	mock.recorder = &MockHttpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpServer) EXPECT() *MockHttpServerMockRecorder {
	return m.recorder
}

// GetAvailableAddress mocks base method
func (m *MockHttpServer) GetAvailableAddress() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableAddress")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableAddress indicates an expected call of GetAvailableAddress
func (mr *MockHttpServerMockRecorder) GetAvailableAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableAddress", reflect.TypeOf((*MockHttpServer)(nil).GetAvailableAddress))
}

// Start mocks base method
func (m *MockHttpServer) Start(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockHttpServerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHttpServer)(nil).Start), arg0)
}
