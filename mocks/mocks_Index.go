// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/remipassmoilesel/gitsearch/index (interfaces: Index)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	index "gitlab.com/remipassmoilesel/gitsearch/index"
	reflect "reflect"
)

// MockIndex is a mock of Index interface
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
}

// MockIndexMockRecorder is the mock recorder for MockIndex
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockIndex) Build() (index.BuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(index.BuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockIndexMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockIndex)(nil).Build))
}

// BuildWith mocks base method
func (m *MockIndex) BuildWith(arg0 index.BuildOptions) (index.BuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildWith", arg0)
	ret0, _ := ret[0].(index.BuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildWith indicates an expected call of BuildWith
func (mr *MockIndexMockRecorder) BuildWith(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWith", reflect.TypeOf((*MockIndex)(nil).BuildWith), arg0)
}

// Clean mocks base method
func (m *MockIndex) Clean() (index.CleanOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(index.CleanOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clean indicates an expected call of Clean
func (mr *MockIndexMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockIndex)(nil).Clean))
}

// Close mocks base method
func (m *MockIndex) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIndexMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIndex)(nil).Close))
}

// DocumentCount mocks base method
func (m *MockIndex) DocumentCount() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DocumentCount")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DocumentCount indicates an expected call of DocumentCount
func (mr *MockIndexMockRecorder) DocumentCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DocumentCount", reflect.TypeOf((*MockIndex)(nil).DocumentCount))
}

// FindDocumentById mocks base method
func (m *MockIndex) FindDocumentById(arg0 string) (index.IndexedFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDocumentById", arg0)
	ret0, _ := ret[0].(index.IndexedFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDocumentById indicates an expected call of FindDocumentById
func (mr *MockIndexMockRecorder) FindDocumentById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDocumentById", reflect.TypeOf((*MockIndex)(nil).FindDocumentById), arg0)
}

// IsUpToDate mocks base method
func (m *MockIndex) IsUpToDate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpToDate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpToDate indicates an expected call of IsUpToDate
func (mr *MockIndexMockRecorder) IsUpToDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpToDate", reflect.TypeOf((*MockIndex)(nil).IsUpToDate))
}

// Search mocks base method
func (m *MockIndex) Search(arg0 string, arg1 int, arg2 string) (index.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1, arg2)
	ret0, _ := ret[0].(index.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockIndexMockRecorder) Search(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndex)(nil).Search), arg0, arg1, arg2)
}
